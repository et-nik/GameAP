get:
  summary: Get Servers
  tags:
    - 'servers'
  description: Returns a list of game servers.
  responses:
    "200":
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Server'
  x-codeSamples:
    - lang: 'cURL'
      label: 'CLI'
      source: |
        curl --request GET \
        --url 'https://demo.gameap.ru/api/servers' \
        --header 'Content-Type: application/json: ' \
        --header 'Authorization: Bearer YOUR_API_KEY'
    - lang: 'PHP'
      source: |
        <?php
  
        $url = 'https://demo.gameap.ru/api/servers';
        $apiKey = 'YOUR_API_KEY';

        $curl = curl_init();
        
        curl_setopt_array($curl, [
          CURLOPT_URL => $url,
          CURLOPT_RETURNTRANSFER => true,
          CURLOPT_ENCODING => '',
          CURLOPT_MAXREDIRS => 10,
          CURLOPT_TIMEOUT => 0,
          CURLOPT_FOLLOWLOCATION => true,
          CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
          CURLOPT_CUSTOMREQUEST => 'GET',
          CURLOPT_HTTPHEADER => [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $apiKey,
          ],
        ]);
        
        $response = curl_exec($curl);
        
        if (curl_errno($curl)) {
            echo 'Curl error: ' . curl_error($curl);
            exit;
        }
        
        curl_close($curl);
        
        $result = json_decode($response, true);
        print_r($result);
    - lang: 'GO'
      source: |
        package main
  
        import (
        "fmt"
        "io"
        "net/http"
        "os"
        )
        
        func main() {
          url := "https://demo.gameap.ru/api/servers"
          apiKey := "YOUR_API_KEY"
          
          client := &http.Client{}
          
          req, err := http.NewRequest("GET", url, nil)
          if err != nil {
            fmt.Println(err)
            return
          }
        
          req.Header.Add("Content-Type", "application/json")
          req.Header.Add("Authorization", "Bearer "+apiKey)
          
          resp, err := client.Do(req)
          if err != nil {
            fmt.Println(err)
            return
          }
          defer resp.Body.Close()
          
          body, err := io.ReadAll(resp.Body)
          if err != nil {
            fmt.Println(err)
            return
          }
          
          fmt.Println(string(body))
        }
    - lang: "NodeJS"
      source: |
        const request = require('request');
  
        const url = 'https://demo.gameap.ru/api/servers';
        const apiKey = 'YOUR_API_KEY';
        
        const headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + apiKey
        };
        
        request.get({
          url: url,
          headers: headers
        }, (error, response, body) => {
          if (error) {
            console.log(error);
          } else {
            console.log(body);
          }
        });
    - lang: "JavaScript"
      label: "JavaScript fetch"
      source: |
          fetch("https://demo.gameap.ru/api/servers", {
          "headers": {
              "accept": "application/json",
              "content-type": "application/json",
              "authorization": "Bearer " + YOUR_API_KEY
          }
          })
          .then(response => {
          console.log(response);
          })
          .catch(err => {
          console.error(err);
          });

post:
  summary: Create Game Server
  tags:
    - 'servers'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            install:
              type: boolean
              description: Install server.
            name:
              type: string
              maxLength: 128
              description: The name of the server.
              example: My Awesome Server
            game_id:
              type: string
              description: The code of the game.
              example: cstrike
            ds_id:
              type: integer
              format: int64
              description: The ID of the game server provider.
              example: 1
            game_mod_id:
              type: integer
              format: int64
              description: The ID of the game mod.
              example: 1
            server_ip:
              type: string
              description: The IP address of the server.
              example: 192.168.1.1
            server_port:
              type: integer
              format: int32
              description: The port number of the game server.
              example: 27015
            query_port:
              type: integer
              format: int32
              nullable: true
              description: The port number of the game server query.
              example: 27016
            rcon_port:
              type: integer
              format: int32
              nullable: true
              description: The port number of the game server rcon.
              example: 27017
            dir:
              type: string
              nullable: true
              description: The directory path of the game server.
              example: servers/my-awesome-server
          required:
            - name
            - game_id
            - ds_id
            - game_mod_id
            - server_ip
            - server_port
  responses:
    200:
      $ref: '../responses/common-success.yaml'
    201:
      $ref: '../responses/common-success.yaml'
    4XX:
      $ref: '../responses/common-error.yaml'
    5XX:
      $ref: '../responses/common-error.yaml'



components:
  schemas:
    Server:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the server.
          example: 1
        uuid:
          type: string
          format: uuid
          description: The UUID of the server.
          example: "9910a3c8-d5b6-428f-8d5d-7bfa4db3ea8e"
        uuid_short:
          type: string
          description: The short UUID of the server.
          example: "9910a3c8"
        enabled:
          type: boolean
          description: Indicates whether the server is enabled.
          example: true
        installed:
          type: integer
          description: Indicates whether the server is installed.
          example: 1
        blocked:
          type: boolean
          description: Indicates whether the server is blocked.
          example: false
        name:
          type: string
          description: The name of the server.
          example: "CS 1.6"
        ds_id:
          type: integer
          description: The ID of the game server provider.
          example: 1
        game_id:
          type: string
          description: The code of the game.
          example: "cstrike"
        game_mod_id:
          type: integer
          description: The ID of the game mod.
          example: 7
        server_ip:
          type: string
          description: The IP address of the server.
          example: "172.17.0.8"
        server_port:
          type: integer
          format: int32
          description: The port number of the game server.
          example: 27015
        query_port:
          type: integer
          format: int32
          description: The port number of the game server query.
          example: 27015
        rcon_port:
          type: integer
          format: int32
          description: The port number of the game server rcon.
          example: 27015
        game:
          type: object
          properties:
            code:
              type: string
              description: The code of the game.
              example: "cstrike"
            name:
              type: string
              description: The name of the game.
              example: "Counter-Strike 1.6"
            engine:
              type: string
              description: The engine of the game.
              example: "GoldSource"
            engine_version:
              type: string
              description: The version of the engine of the game.
              example: "1"
        online:
          type: boolean
          description: Indicates whether the server is online.
          example: true
